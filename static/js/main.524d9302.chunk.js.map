{"version":3,"sources":["components/Task.js","components/TaskBox.js","App.js","reportWebVitals.js","index.js"],"names":["Task","props","TaskClassName","checked","checkTask","checkTaskFunction","index","TitleClassName","removeTask","removeFunction","checkButton","React","createRef","className","this","title","type","onChange","ref","onClick","Component","TaskBox","tasks","map","task","App","getValue","element","setState","inputValue","target","value","addTask","state","trim","slice","addValue","concat","taskInput","current","focus","saveTasks","removeAllTasks","taskIndex","tasksList","splice","getKeyValue","event","which","taskChecked","Storage","localStorage","savedTasks","JSON","stringify","console","log","loadTasks","loadedTasks","parse","placeholder","onKeyPress","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAqDeA,E,kDAjDd,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IAGPC,cAAc,WACb,OAAG,EAAKD,MAAME,QACN,oBAEA,QARS,EAalBC,UAAU,WACT,EAAKH,MAAMI,kBAAkB,EAAKJ,MAAME,QAAQ,EAAKF,MAAMK,QAd1C,EAgBlBC,eAAe,WACd,OAAG,EAAKN,MAAME,QACN,2BAEA,cApBS,EAuBlBK,WAAW,WACV,EAAKP,MAAMQ,eAAe,EAAKR,MAAMK,QAtBrC,EAAKI,YAAcC,IAAMC,YAFR,E,0CA0BlB,WACC,OACC,sBAAKC,UAAWC,KAAKZ,gBAArB,UACC,mBAAGW,UAAWC,KAAKP,iBAAnB,SAAsCO,KAAKb,MAAMc,QAGjD,sBAAKF,UAAU,eAAf,UACC,uBAAOG,KAAK,WAAWH,UAAU,gBAAgBI,SAAUH,KAAKV,UAAWc,IAAKJ,KAAKJ,YAAaP,QAASW,KAAKb,MAAME,UACtH,sBAAKU,UAAU,oBAAoBM,QAASL,KAAKN,WAAjD,UACC,qBAAKK,UAAU,kBAGf,qBAAKA,UAAU,+B,GAvCFF,IAAMS,WCcVC,E,4JAXd,WAAS,IAAD,OACP,OACC,qBAAKR,UAAU,YAAf,SAEEC,KAAKb,MAAMqB,MAAMC,KAAI,SAACC,EAAKlB,GAAW,OAAO,cAAC,EAAD,CAAMS,MAAOS,EAAKT,MAAmBT,MAAOA,EAAOH,QAASqB,EAAKrB,QAASM,eAAgB,EAAKR,MAAMQ,eAAgBJ,kBAAmB,EAAKJ,MAAMI,mBAArHC,Y,GAN1DK,IAAMS,WCmGbK,E,kDAnGX,WAAYxB,GAAO,IAAD,8BACd,cAAMA,IAUXyB,SAAS,SAACC,GACL,EAAKC,SAAS,CACVC,WAAWF,EAAQG,OAAOC,SAbhB,EAgBpBC,QAAQ,WACJ,IAAID,EAAQ,EAAKE,MAAMJ,WAAWK,OAClCH,EAAQA,EAAMI,MAAM,EAAE,IACtB,IAAIC,EAAW,EAAKH,MAAMX,MAAMe,OAAO,CAACtB,MAAMgB,EAAM5B,SAAQ,IAC/C,KAAV4B,GAA0B,OAAVA,GACf,EAAKH,SAAS,CACVN,MAAMc,IAGd,EAAKE,UAAUC,QAAQC,QACvB,EAAKF,UAAUC,QAAQR,MAAQ,GAC/B,EAAKH,SAAS,CAACC,WAAW,KAC1B,EAAKY,aA5BW,EA8BpBC,eAAe,WACT,EAAKd,SAAS,CACVN,MAAM,MAhCI,EAmCpBd,WAAW,SAACmC,GACR,IAAIC,EAAY,EAAKX,MAAMX,MAC3BsB,EAAUC,OAAOF,EAAU,GAC3B,EAAKf,SAAS,CACVN,MAAMsB,KAvCM,EA0ClBE,YAAY,SAACC,GAEK,KADCA,EAAMC,OAEjB,EAAKhB,WA7CK,EAgDlB5B,UAAU,SAAC6C,EAAYN,GACnB,IAAIC,EAAY,EAAKX,MAAMX,MAC3BsB,EAAUD,GAAWxC,SAAW8C,EAChC,EAAKrB,SAAS,CACVN,MAAMsB,KApDI,EAuDlBH,UAAU,WACiB,qBAAbS,UACPC,aAAaC,YACZD,aAAaC,WAAaC,KAAKC,UAAU,EAAKrB,MAAMX,OACpDiC,QAAQC,IAAIL,aAAaC,WAAW,EAAKnB,MAAMX,QAE/C6B,aAAaC,WAAaC,KAAKC,UAAU,EAAKrB,MAAMX,SA7D1C,EAiElBmC,UAAU,WACN,IAAIC,EAAc,GACfP,aAAaC,aACZM,EAAYL,KAAKM,MAAMR,aAAaC,aAExC,EAAKxB,SAAS,CAACN,MAAMoC,KApErB,EAAKzB,MAAQ,CACTX,MAAM,CAAC,CAACP,MAAM,OACNZ,SAAQ,IAGhB0B,WAAW,IAEf,EAAKS,UAAY3B,IAAMC,YATT,E,sDAwElB,WACIE,KAAK2B,c,+BAET,WACI3B,KAAK2C,c,oBAEX,WACI,OACI,sBAAK5C,UAAU,MAAf,UACI,oBAAIA,UAAU,QAAd,uBACA,cAAC,EAAD,CAASS,MAAOR,KAAKmB,MAAMX,MAAOb,eAAgBK,KAAKN,WAAYH,kBAAmBS,KAAKV,YAE3F,sBAAKS,UAAU,YAAf,UACI,uBAAOG,KAAK,OAAOH,UAAU,aAAa+C,YAAY,iBAAiB3C,SAAUH,KAAKY,SACtFmC,WAAY/C,KAAKgC,YAAa5B,IAAKJ,KAAKwB,YACxC,wBAAQzB,UAAU,aAAaM,QAASL,KAAKkB,QAA7C,oBAEA,wBAAQnB,UAAU,gBAAgBM,QAASL,KAAK4B,eAAhD,sC,GA1FA/B,IAAMS,WCST0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.524d9302.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./task.css\";\r\n\r\nclass Task extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.checkButton = React.createRef();\r\n\t}\r\n\tTaskClassName=()=>{\r\n\t\tif(this.props.checked){\r\n\t\t\treturn \"task task_checked\";\r\n\t\t}else{\r\n\t\t\treturn \"task\";\r\n\t\t}\r\n\r\n\r\n\t}\r\n\tcheckTask=()=>{\r\n\t\tthis.props.checkTaskFunction(this.props.checked,this.props.index);\r\n\t}\r\n\tTitleClassName=()=>{\r\n\t\tif(this.props.checked){\r\n\t\t\treturn \"task_title title_checked\";\r\n\t\t}else{\r\n\t\t\treturn \"task_title\";\r\n\t\t}\r\n\t}\r\n\tremoveTask=()=>{\r\n\t\tthis.props.removeFunction(this.props.index);\r\n\t}\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className={this.TaskClassName()}>\r\n\t\t\t\t<p className={this.TitleClassName()}>{this.props.title}\r\n\t\t\t\t\t{/*text limit = 25 letters*/}\r\n\t\t\t\t</p>\r\n\t\t\t\t<div className=\"task_buttons\">\r\n\t\t\t\t\t<input type=\"checkbox\" className=\"task_checkbox\" onChange={this.checkTask} ref={this.checkButton} checked={this.props.checked}/>\r\n\t\t\t\t\t<div className=\"remove_button_box\" onClick={this.removeTask}>\r\n\t\t\t\t\t\t<div className=\"line line_one\">\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"line line_two\">\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport \"./task_box.css\";\r\nimport Task from \"./Task\";\r\n\r\nclass TaskBox extends React.Component {\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"tasks_box\">\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.props.tasks.map((task,index) => {return <Task title={task.title} key={index} index={index} checked={task.checked} removeFunction={this.props.removeFunction} checkTaskFunction={this.props.checkTaskFunction}/>;})\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n}\r\nexport default TaskBox;","import React from 'react';\nimport './App.css';\nimport TaskBox from \"./components/TaskBox\";\nclass App extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            tasks:[{title:\"Task\",\n                    checked:false\n                   }\n            ],\n            inputValue:\"\",\n        }\n        this.taskInput = React.createRef();\n    }\n   getValue=(element)=>{\n        this.setState({\n            inputValue:element.target.value,\n        })\n  }\n  addTask=()=>{\n      let value = this.state.inputValue.trim();\n      value = value.slice(0,24);\n      let addValue = this.state.tasks.concat({title:value,checked:false});\n      if(value !== \"\" && value !== null){\n          this.setState({\n              tasks:addValue,\n          })\n      }\n      this.taskInput.current.focus();\n      this.taskInput.current.value = \"\";\n      this.setState({inputValue:\"\"});\n      this.saveTasks();\n  }\n  removeAllTasks=()=>{\n        this.setState({\n            tasks:[],\n        })\n  }\n  removeTask=(taskIndex)=>{\n      let tasksList = this.state.tasks;\n      tasksList.splice(taskIndex,1);\n      this.setState({\n          tasks:tasksList\n      })\n  }\n    getKeyValue=(event)=>{\n        let keyValue = event.which;\n        if(keyValue===13){\n            this.addTask()\n        }\n    }\n    checkTask=(taskChecked,taskIndex)=>{\n        let tasksList = this.state.tasks;\n        tasksList[taskIndex].checked = !taskChecked;\n        this.setState({\n            tasks:tasksList\n        })\n    }\n    saveTasks=()=>{\n        if(typeof(Storage) !== \"undefined\"){\n        if(localStorage.savedTasks){\n            localStorage.savedTasks = JSON.stringify(this.state.tasks);\n            console.log(localStorage.savedTasks,this.state.tasks);\n        }else{\n            localStorage.savedTasks = JSON.stringify(this.state.tasks);\n        }\n        }\n    }\n    loadTasks=()=>{\n        let loadedTasks = [];\n        if(localStorage.savedTasks){\n            loadedTasks=JSON.parse(localStorage.savedTasks);\n        }\n        this.setState({tasks:loadedTasks})\n    }\n    componentDidUpdate(){\n        this.saveTasks();\n    }\n    componentDidMount(){\n        this.loadTasks();\n    }\n  render() {\n      return (\n          <div className=\"app\">\n              <h1 className=\"title\">To Do App</h1>\n              <TaskBox tasks={this.state.tasks} removeFunction={this.removeTask} checkTaskFunction={this.checkTask}>\n              </TaskBox>\n              <div className=\"input_box\">\n                  <input type=\"text\" className=\"task_input\" placeholder=\"Add your task.\" onChange={this.getValue}\n                  onKeyPress={this.getKeyValue} ref={this.taskInput}/>\n                  <button className=\"add_button\" onClick={this.addTask} >Add</button>\n              </div>\n                  <button className=\"remove_button\" onClick={this.removeAllTasks}>Remove All Tasks!</button>\n              </div>\n      );\n  }\n\n\n\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}